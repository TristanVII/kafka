version: '3.3'

services:

  nginx:
    image: nginx:latest
    volumes:
      # Connects the conf file of the container to the conf file in our folder
      - /home/tristandavis888/nginx/nginx.conf:/etc/nginx/nginx.conf:ro
    depends_on:
      # It will start up the nginx only when all api containers have started
      - receiver
      - storage
      - processing
      - audit
      - dashboard
    ports:
      # Connects the port 80 of the nginx container to localhost:80 or localhost
      - "80:80"
    networks:
      - api.network


  zookeeper:
    image: wurstmeister/zookeeper
    ports:
      - "2181"
    hostname: zookeeper
    volumes:
      - zookeeper_db:/opt/zookeeper-3.4.13/data

  kafka:
    image: wurstmeister/kafka
    command: [start-kafka.sh]
    ports:
      - "9092:9092"
    hostname: kafka
    environment:
      KAFKA_CREATE_TOPICS: "events:1:1,events2:1:1" # topic:partition:replicas
      KAFKA_ADVERTISED_HOST_NAME: 34.118.240.191 # docker-machine ip
      KAFKA_LISTENERS: INSIDE://:29092,OUTSIDE://:9092
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ADVERTISED_LISTENERS: INSIDE://kafka:29092,OUTSIDE://34.118.240.191:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_LOG_DIRS: /kafka/kafka-logs
      KAFKA_BROKER_ID: 1
    volumes:
      - docker_sock_db:/var/run/docker.sock
      - kafka_db:/kafka/kafka-logs
    depends_on:
      - zookeeper
    healthcheck:
      test: ["CMD", "kafka-topics.sh", "--list", "--zookeeper", "zookeeper:2181"]
      interval: 5s
      timeout: 10s
      retries: 5

  db:
    image: mysql:5.7
    restart: always
    environment:
      MYSQL_DATABASE: 'events'
      MYSQL_USER: 'user'
      MYSQL_PASSWORD: 'password'
      MYSQL_ROOT_PASSWORD: 'password'
    ports:
      - '3306:3306'
    expose:
      - '3306'
    volumes:
      - my-db:/var/lib/mysql

  storage:
    image: tristan007/storage:storageImage
    ports:
      - "8090"
    networks:
      - "api.network"
    environment:
      - TARGET_ENV=TEST
    volumes:
      - /home/tristandavis888/config/storage:/config
      - /home/tristandavis888/logs:/logs
    depends_on:
      kafka:
          condition: service_healthy

      

  receiver:
    image: tristan007/receiver:receiverImage
    ports: 
      - "8080"
    networks:
      - "api.network"
    environment:
      - TARGET_ENV=TEST
    volumes:
      - /home/tristandavis888/config/receiver:/config
      - /home/tristandavis888/logs:/logs 
    depends_on:
      kafka:
          condition: service_healthy
  
  processing:
    image: tristan007/processing:processingImage
    networks:
      - "api.network"
    environment:
      - TARGET_ENV=TEST
    volumes:
      - /home/tristandavis888/config/processing:/config
      - /home/tristandavis888/logs:/logs
      - processing_db:/data
    depends_on:
      kafka:
          condition: service_healthy

  audit:
    build: ../../api-project/audit
    environment:
      - TARGET_ENV=TEST
    networks:
      - "api.network"
    volumes:
      - /home/tristandavis888/config/audit_log:/config
      - /home/tristandavis888/logs:/logs
    depends_on:
      kafka:
          condition: service_healthy
  
  dashboard:
    build: ../../api-project/dashboard
    ports:
      - "3000"
    networks:
      - "api.network"

  event_logger:
    build: ../../api-project/event_logger
    environment:
      - TARGET_ENV=TEST
    depends_on:
     kafka:
          condition: service_healthy
    volumes:
      - audit_db:/var/db
      - /home/tristandavis888/config/event_logger:/config
      - /home/tristandavis888/logs:/logs
    networks:
      - "api.network"

  anomaly_detector:
    build: ../../api-project/anomaly_detector
    environment:
      - TARGET_ENV=TEST
    depends_on:
     kafka:
          condition: service_healthy
    volumes:
      - anomaly_db:/var/db
      - /home/tristandavis888/config/anomalies:/config
      - /home/tristandavis888/logs:/logs
    networks:
      - "api.network"

volumes:
  my-db:
  zookeeper_db:
  kafka_db:
  docker_sock_db:
  audit_db:
  processing_db:
  anomaly_db:

networks:
  api.network:
